/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.73
 * Generated at: 2017-12-07 17:50:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.wso2.carbon.identity.application.authentication.endpoint.util.Constants;
import java.util.ArrayList;
import java.util.Arrays;
import org.owasp.encoder.Encode;
import java.util.Map;
import java.util.List;
import org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager;
import java.util.ResourceBundle;
import org.wso2.carbon.identity.core.util.IdentityCoreConstants;
import org.owasp.encoder.Encode;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager;
import java.util.List;
import org.owasp.encoder.Encode;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.http.HttpStatus;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.core.util.IdentityUtil;
import javax.ws.rs.core.Response;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    private static final String FIDO_AUTHENTICATOR = "FIDOAuthenticator";
    private static final String IWA_AUTHENTICATOR = "IWAAuthenticator";
    private static final String IS_SAAS_APP = "isSaaSApp";
    private static final String BASIC_AUTHENTICATOR = "BasicAuthenticator";
    private static final String OPEN_ID_AUTHENTICATOR = "OpenIDAuthenticator";

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/basicauth.jsp", Long.valueOf(1483467660000L));
    _jspx_dependants.put("/openid.jsp", Long.valueOf(1483467660000L));
    _jspx_dependants.put("/tenantauth.jsp", Long.valueOf(1483467660000L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.release();
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      //  fmt:bundle
      org.apache.taglibs.standard.tag.rt.fmt.BundleTag _jspx_th_fmt_005fbundle_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.BundleTag) _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.get(org.apache.taglibs.standard.tag.rt.fmt.BundleTag.class);
      try {
        _jspx_th_fmt_005fbundle_005f0.setPageContext(_jspx_page_context);
        _jspx_th_fmt_005fbundle_005f0.setParent(null);
        // /login.jsp(37,2) name = basename type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_fmt_005fbundle_005f0.setBasename("org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources");
        int _jspx_eval_fmt_005fbundle_005f0 = _jspx_th_fmt_005fbundle_005f0.doStartTag();
        if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.pushBody();
            _jspx_th_fmt_005fbundle_005f0.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
            _jspx_th_fmt_005fbundle_005f0.doInitBody();
          }
          do {
            out.write("\n");
            out.write("\n");
            out.write("    ");

        String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";
        ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, request.getLocale());

        request.getSession().invalidate();
        String queryString = request.getQueryString();
        Map<String, String> idpAuthenticatorMapping = null;
        if (request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP) != null) {
            idpAuthenticatorMapping = (Map<String, String>) request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP);
        }

        String errorMessage = "Authentication Failed! Please Retry";
        String errorCode = "";
        if(request.getParameter(Constants.ERROR_CODE)!=null){
            errorCode = request.getParameter(Constants.ERROR_CODE) ;
        }
        String loginFailed = "false";

        if (Boolean.parseBoolean(request.getParameter(Constants.AUTH_FAILURE))) {
            loginFailed = "true";
            if (request.getParameter(Constants.AUTH_FAILURE_MSG) != null) {
                errorMessage = resourceBundle.getString(request.getParameter(Constants.AUTH_FAILURE_MSG));
            }
        }
    
            out.write("\n");
            out.write("    ");


        boolean hasLocalLoginOptions = false;
        List<String> localAuthenticatorNames = new ArrayList<String>();

        if (idpAuthenticatorMapping != null && idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) {
            String authList = idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME);
            if (authList != null) {
                localAuthenticatorNames = Arrays.asList(authList.split(","));
            }
        }


    
            out.write("\n");
            out.write("    ");

        boolean reCaptchaEnabled = false;
        if (request.getParameter("reCaptcha") != null && "TRUE".equalsIgnoreCase(request.getParameter("reCaptcha"))) {
            reCaptchaEnabled = true;
        }
    
            out.write("\n");
            out.write("    <html>\n");
            out.write("    <head>\n");
            out.write("        <meta charset=\"utf-8\">\n");
            out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
            out.write("        <title>WSO2 Identity Server</title>\n");
            out.write("\n");
            out.write("        <link rel=\"icon\" href=\"images/favicon.png\" type=\"image/x-icon\"/>\n");
            out.write("        <link href=\"libs/bootstrap_3.3.5/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
            out.write("        <link href=\"css/Roboto.css\" rel=\"stylesheet\">\n");
            out.write("        <link href=\"css/custom-common.css\" rel=\"stylesheet\">\n");
            out.write("\n");
            out.write("        <!--[if lt IE 9]>\n");
            out.write("        <script src=\"js/html5shiv.min.js\"></script>\n");
            out.write("        <script src=\"js/respond.min.js\"></script>\n");
            out.write("        <![endif]-->\n");
            out.write("\n");
            out.write("        ");

            if (reCaptchaEnabled) {
        
            out.write("\n");
            out.write("        <script src='");
            out.print(
        (request.getParameter("reCaptchaAPI")));
            out.write("'></script>\n");
            out.write("        ");

            }
        
            out.write("\n");
            out.write("    </head>\n");
            out.write("\n");
            out.write("    <body>\n");
            out.write("\n");
            out.write("    <!-- header -->\n");
            out.write("    <header class=\"header header-default\">\n");
            out.write("        <div class=\"container-fluid\"><br></div>\n");
            out.write("        <div class=\"container-fluid\">\n");
            out.write("            <div class=\"pull-left brand float-remove-xs text-center-xs\">\n");
            out.write("                <a href=\"#\">\n");
            out.write("                    <img src=\"images/logo-inverse.svg\" alt=\"wso2\" title=\"wso2\" class=\"logo\">\n");
            out.write("\n");
            out.write("                    <h1><em>Identity Server</em></h1>\n");
            out.write("                </a>\n");
            out.write("            </div>\n");
            out.write("        </div>\n");
            out.write("    </header>\n");
            out.write("\n");
            out.write("    <!-- page content -->\n");
            out.write("    <div class=\"container-fluid body-wrapper\">\n");
            out.write("\n");
            out.write("        <div class=\"row\">\n");
            out.write("            <div class=\"col-md-12\">\n");
            out.write("\n");
            out.write("                <!-- content -->\n");
            out.write("                <div class=\"container col-xs-10 col-sm-6 col-md-6 col-lg-3 col-centered wr-content wr-login col-centered\">\n");
            out.write("                    <div>\n");
            out.write("                        <h2 class=\"wr-title uppercase blue-bg padding-double white boarder-bottom-blue margin-none\">Sign\n");
            out.write("                            in </h2>\n");
            out.write("                    </div>\n");
            out.write("                    <div class=\"boarder-all \">\n");
            out.write("                        <div class=\"clearfix\"></div>\n");
            out.write("                        <div class=\"padding-double login-form\">\n");
            out.write("                            ");

                                if (localAuthenticatorNames.size() > 0) {

                                    if (localAuthenticatorNames.size() > 0 && localAuthenticatorNames.contains(OPEN_ID_AUTHENTICATOR)) {
                                        hasLocalLoginOptions = true;
                            
            out.write("\n");
            out.write("\n");
            out.write("                            ");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("<form action=\"../commonauth\" method=\"post\" id=\"loginForm\" class=\"form-horizontal\">\n");
            out.write("    ");

        loginFailed = request.getParameter("loginFailed");
        if (loginFailed != null) {

    
            out.write("\n");
            out.write("    <div class=\"alert alert-danger\">\n");
            out.write("        ");
            //  fmt:message
            org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
            try {
              _jspx_th_fmt_005fmessage_005f0.setPageContext(_jspx_page_context);
              _jspx_th_fmt_005fmessage_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
              // /openid.jsp(27,8) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_fmt_005fmessage_005f0.setKey(Encode.forHtml(request.getParameter("errorMessage")));
              int _jspx_eval_fmt_005fmessage_005f0 = _jspx_th_fmt_005fmessage_005f0.doStartTag();
              if (_jspx_th_fmt_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
            } finally {
              _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f0);
            }
            out.write("\n");
            out.write("    </div>\n");
            out.write("    ");
 } 
            out.write("\n");
            out.write("\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <input class=\"input-large\" type=\"text\" id=\"claimed_id\" name=\"claimed_id\" size='30' placeholder=\"Open ID\"/>\n");
            out.write("        <input type=\"hidden\" name=\"sessionDataKey\"\n");
            out.write("               value='");
            out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
            out.write("'/>\n");
            out.write("    </div>\n");
            out.write("\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <div class=\"checkbox\">\n");
            out.write("            <label>\n");
            out.write("                <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\"> Remember me on this computer\n");
            out.write("            </label>\n");
            out.write("        </div>\n");
            out.write("        <br>\n");
            out.write("\n");
            out.write("        <div class=\"form-actions\">\n");
            out.write("            <button\n");
            out.write("                    class=\"wr-btn grey-bg col-xs-12 col-md-12 col-lg-12 uppercase font-extra-large\"\n");
            out.write("                    type=\"submit\">Sign in\n");
            out.write("            </button>\n");
            out.write("        </div>\n");
            out.write("    </div>\n");
            out.write("\n");
            out.write("\n");
            out.write("    <div class=\"clearfix\"></div>\n");
            out.write("</form>\n");
            out.write("\n");
            out.write("\n");
            out.write("                            ");

                            } else if (localAuthenticatorNames.size() > 0 && localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                                hasLocalLoginOptions = true;
                            
            out.write("\n");
            out.write("\n");
            out.write("                            ");

                                if (TenantDataManager.isTenantListEnabled() && Boolean.parseBoolean(request.getParameter(IS_SAAS_APP))) {
                            
            out.write("\n");
            out.write("\n");
            out.write("                            ");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("<form action=\"../commonauth\" method=\"post\" id=\"loginForm\">\n");
            out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
            out.write("\n");
            out.write("    <div class=\"alert alert-danger\" id=\"error-msg\">Username or password is\n");
            out.write("        invalid\n");
            out.write("    </div>\n");
            out.write("    ");
}
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <select class=\"form-control\" id='tenantList' name=\"tenantList\" size='1'>\n");
            out.write("            <option value=\"");
            if (_jspx_meth_fmt_005fmessage_005f1(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\">\n");
            out.write("                ");
            if (_jspx_meth_fmt_005fmessage_005f2(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\n");
            out.write("            </option>\n");
            out.write("            <option value=\"");
            if (_jspx_meth_fmt_005fmessage_005f3(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write('"');
            out.write('>');
            if (_jspx_meth_fmt_005fmessage_005f4(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\n");
            out.write("            </option>\n");
            out.write("\n");
            out.write("            ");

                List<String> tenantDomainsList = TenantDataManager.getAllActiveTenantDomains();
                if (!tenantDomainsList.isEmpty()) {
                    for (String tenant : tenantDomainsList) {
            
            out.write("\n");
            out.write("            <option value=\"");
            out.print(Encode.forHtmlAttribute(tenant));
            out.write('"');
            out.write('>');
            out.print(Encode.forHtmlContent(tenant));
            out.write("\n");
            out.write("            </option>\n");
            out.write("            ");

                    }
                }
            
            out.write("\n");
            out.write("        </select>\n");
            out.write("    </div>\n");
            out.write("\n");
            out.write("    <input type=\"hidden\" id='username' name='username'/>\n");
            out.write("\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <input id='username_tmp' name=\"username_tmp\" type=\"text\" class=\"form-control\" tabindex=\"0\"\n");
            out.write("               placeholder=\"Username\">\n");
            out.write("    </div>\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <input id=\"password\" name=\"password\" type=\"password\" class=\"form-control\"\n");
            out.write("               placeholder=\"Password\">\n");
            out.write("    </div>\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <input type=\"hidden\" name=\"sessionDataKey\" value='");
            out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
            out.write("'/>\n");
            out.write("    </div>\n");
            out.write("\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <div class=\"checkbox\">\n");
            out.write("            <label>\n");
            out.write("                <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\"> Remember me on this computer\n");
            out.write("            </label>\n");
            out.write("        </div>\n");
            out.write("        <br>\n");
            out.write("\n");
            out.write("        <div class=\"form-actions\">\n");
            out.write("            <button\n");
            out.write("                    class=\"wr-btn grey-bg col-xs-12 col-md-12 col-lg-12 uppercase font-extra-large\"\n");
            out.write("                    type=\"submit\" onclick=\"appendTenantDomain();\">Sign in\n");
            out.write("            </button>\n");
            out.write("        </div>\n");
            out.write("    </div>\n");
            out.write("\n");
            out.write("    ");
if(request.getParameter("relyingParty").equals("wso2.my.dashboard")) { 
            out.write("\n");
            out.write("    <a id=\"registerLink\" href=\"create-account.jsp?sessionDataKey=");
            out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
            out.write("\" class=\"font-large\">Create an\n");
            out.write("        account</a>\n");
            out.write("    ");
} 
            out.write("\n");
            out.write("\n");
            out.write("    <script>\n");
            out.write("\n");
            out.write("        /**\n");
            out.write("         * Append the tenant domain to the username\n");
            out.write("         */\n");
            out.write("        function appendTenantDomain() {\n");
            out.write("            var element = document.getElementById(\"tenantList\");\n");
            out.write("            var tenantDomain = element.options[element.selectedIndex].value;\n");
            out.write("\n");
            out.write("            setSelectedTenantCookie(tenantDomain, 30);\n");
            out.write("\n");
            out.write("            if (tenantDomain != \"");
            if (_jspx_meth_fmt_005fmessage_005f5(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\") {\n");
            out.write("\n");
            out.write("                var username = document.getElementsByName(\"username_tmp\")[0].value;\n");
            out.write("                var userWithDomain = username + \"@\" + tenantDomain;\n");
            out.write("\n");
            out.write("                document.getElementsByName(\"username\")[0].value = userWithDomain;\n");
            out.write("            }\n");
            out.write("        }\n");
            out.write("\n");
            out.write("        /**\n");
            out.write("         * Write the selected tenant domain to the cookie\n");
            out.write("         */\n");
            out.write("        function setSelectedTenantCookie(cvalue, exdays) {\n");
            out.write("            var date = new Date();\n");
            out.write("            date.setTime(date.getTime() + (exdays * 24 * 60 * 60 * 1000));\n");
            out.write("            var expires = \"expires=\" + date.toUTCString();\n");
            out.write("            document.cookie = \"selectedTenantDomain=\" + cvalue + \"; \" + expires + \"; secure\";\n");
            out.write("        }\n");
            out.write("\n");
            out.write("        /**\n");
            out.write("         * Get the previously selected tenant domain from the cookie\n");
            out.write("         */\n");
            out.write("        function getSelectedTenantCookie() {\n");
            out.write("            var selectedTenantDomain = \"\";\n");
            out.write("            var name = \"selectedTenantDomain=\";\n");
            out.write("            var cookieItems = document.cookie.split(';');\n");
            out.write("\n");
            out.write("            for (var i = 0; i < cookieItems.length; i++) {\n");
            out.write("                var item = cookieItems[i];\n");
            out.write("                item = item.trim();\n");
            out.write("\n");
            out.write("                if (item.indexOf(name) != -1) {\n");
            out.write("                    selectedTenantDomain = item.substring(name.length, item.length);\n");
            out.write("                    break;\n");
            out.write("                }\n");
            out.write("            }\n");
            out.write("            return selectedTenantDomain;\n");
            out.write("        }\n");
            out.write("\n");
            out.write("        /**\n");
            out.write("         * Select the tenant domain based on the previously selected tenant domain in cookie\n");
            out.write("         */\n");
            out.write("        function selectTenantFromCookie() {\n");
            out.write("            var tenant = getSelectedTenantCookie();\n");
            out.write("            var element = document.getElementById(\"tenantList\");\n");
            out.write("\n");
            out.write("            for (var i = 0; i < element.options.length; i++) {\n");
            out.write("                if (element.options[i].value == tenant) {\n");
            out.write("                    element.value = tenant;\n");
            out.write("                    break;\n");
            out.write("                }\n");
            out.write("            }\n");
            out.write("\n");
            out.write("            //remove super tenant from dropdown based on the properties\n");
            out.write("            var superTenant = \"");
            if (_jspx_meth_fmt_005fmessage_005f6(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("            if (superTenant == null || superTenant == \"\") {\n");
            out.write("                for (i = 0; i < element.options.length; i++) {\n");
            out.write("                    if (element.options[i].value == superTenant) {\n");
            out.write("                        element.remove(i);\n");
            out.write("                        break;\n");
            out.write("                    }\n");
            out.write("                }\n");
            out.write("            }\n");
            out.write("        }\n");
            out.write("    </script>\n");
            out.write("    <div class=\"clearfix\"></div>\n");
            out.write("</form>\n");
            out.write("\n");
            out.write("\n");
            out.write("                            <script>\n");
            out.write("                                //set the selected tenant domain in dropdown from the cookie value\n");
            out.write("                                window.onload = selectTenantFromCookie;\n");
            out.write("                            </script>\n");
            out.write("                            ");

                            } else {
                            
            out.write("\n");
            out.write("                            ");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");

    String resendUsername = request.getParameter("resend_username");
    if (StringUtils.isNotBlank(resendUsername)) {

        String url = config.getServletContext().getInitParameter(Constants.ACCOUNT_RECOVERY_REST_ENDPOINT_URL);

        ResendCodeRequestDTO selfRegistrationRequest = new ResendCodeRequestDTO();
        UserDTO userDTO = AuthenticationEndpointUtil.getUser(resendUsername);
        selfRegistrationRequest.setUser(userDTO);
        url = url.replace("tenant-domain", userDTO.getTenantDomain());

        List<JSONProvider> providers = new ArrayList<JSONProvider>();
        JSONProvider jsonProvider = new JSONProvider();
        jsonProvider.setDropRootElement(true);
        jsonProvider.setIgnoreNamespaces(true);
        jsonProvider.setValidateOutput(true);
        jsonProvider.setSupportUnwrapped(true);
        providers.add(jsonProvider);

        SelfUserRegistrationResource selfUserRegistrationResource = JAXRSClientFactory
                .create(url, SelfUserRegistrationResource.class, providers);
        Response selfRegistrationResponse = selfUserRegistrationResource.regenerateCode(selfRegistrationRequest);
        if (selfRegistrationResponse != null &&  selfRegistrationResponse.getStatus() == HttpStatus.SC_CREATED) {

            out.write("\n");
            out.write("<div class=\"alert alert-info\">");
            out.print( Encode.forHtml(resourceBundle.getString(Constants.ACCOUNT_RESEND_SUCCESS_RESOURCE)) );
            out.write("\n");
            out.write("</div>\n");

} else {

            out.write("\n");
            out.write("<div class=\"alert alert-danger\">");
            out.print( Encode.forHtml(resourceBundle.getString(Constants.ACCOUNT_RESEND_FAIL_RESOURCE))  );
            out.write("\n");
            out.write("</div>\n");

        }
    }

            out.write('\n');
            out.write('\n');
            out.write('\n');

    String type = request.getParameter("type");
    if ("samlsso".equals(type)) {

            out.write("\n");
            out.write("<form action=\"/samlsso\" method=\"post\" id=\"loginForm\">\n");
            out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");

    } else if ("oauth2".equals(type)){

            out.write("\n");
            out.write("    <form action=\"/oauth2/authorize\" method=\"post\" id=\"loginForm\">\n");
            out.write("        <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
            out.write("\n");

    } else {

            out.write("\n");
            out.write("\n");
            out.write("<form action=\"../commonauth\" method=\"post\" id=\"loginForm\">\n");
            out.write("\n");
            out.write("    ");

        }
    
            out.write("\n");
            out.write("\n");
            out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
            out.write("\n");
            out.write("    <div class=\"alert alert-danger\" id=\"error-msg\">");
            out.print( Encode.forHtml(errorMessage) );
            out.write("\n");
            out.write("    </div>\n");
            out.write("    ");
}else if((Boolean.TRUE.toString()).equals(request.getParameter("authz_failure"))){
            out.write("\n");
            out.write("    <div class=\"alert alert-danger\" id=\"error-msg\">You are not authorized to login\n");
            out.write("    </div>\n");
            out.write("    ");
}
            out.write("\n");
            out.write("\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <input id=\"username\" name=\"username\" type=\"text\" class=\"form-control\" tabindex=\"0\"\n");
            out.write("               placeholder=\"Username\">\n");
            out.write("    </div>\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <input id=\"password\" name=\"password\" type=\"password\" class=\"form-control\"\n");
            out.write("               placeholder=\"Password\" autocomplete=\"off\">\n");
            out.write("    </div>\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <input type=\"hidden\" name=\"sessionDataKey\" value='");
            out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
            out.write("'/>\n");
            out.write("    </div>\n");
            out.write("    ");

        if (reCaptchaEnabled) {
    
            out.write("\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <div class=\"g-recaptcha\"\n");
            out.write("             data-sitekey=\"");
            out.print(Encode.forHtmlContent(request.getParameter("reCaptchaKey")));
            out.write("\">\n");
            out.write("        </div>\n");
            out.write("    </div>\n");
            out.write("    ");

        }
    
            out.write("\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        <div class=\"checkbox\">\n");
            out.write("            <label>\n");
            out.write("                <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\"> Remember me on this computer\n");
            out.write("            </label>\n");
            out.write("        </div>\n");
            out.write("        <br>\n");
            out.write("\n");
            out.write("        <div class=\"form-actions\">\n");
            out.write("            <button\n");
            out.write("                    class=\"wr-btn grey-bg col-xs-12 col-md-12 col-lg-12 uppercase font-extra-large\"\n");
            out.write("                    type=\"submit\">Sign in\n");
            out.write("            </button>\n");
            out.write("        </div>\n");
            out.write("    </div>\n");
            out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
            out.write("        ");


            String scheme = request.getScheme();
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String uri = (String) request.getAttribute("javax.servlet.forward.request_uri");
            String prmstr = (String) request.getAttribute("javax.servlet.forward.query_string");
            String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;
            String urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, "UTF-8");

            if (request.getParameter("relyingParty").equals("wso2.my.dashboard")) {
                String identityMgtEndpointContext =
                        application.getInitParameter("IdentityManagementEndpointContextURL");
                if (StringUtils.isBlank(identityMgtEndpointContext)) {
                    identityMgtEndpointContext = IdentityUtil.getServerURL("/accountrecoveryendpoint", true, true);
                }

                URL url = null;
                HttpURLConnection httpURLConnection = null;

                url = new URL(identityMgtEndpointContext + "/recoverpassword.do?callback="+Encode.forHtmlAttribute
                        (urlEncodedURL ));
                httpURLConnection = (HttpURLConnection) url.openConnection();
                httpURLConnection.setRequestMethod("HEAD");
                httpURLConnection.connect();
                if (httpURLConnection.getResponseCode() == HttpURLConnection.HTTP_OK) {
        
            out.write("\n");
            out.write("        <a id=\"passwordRecoverLink\" href=\"");
            out.print(url);
            out.write("\">Forgot Password </a>\n");
            out.write("        <br/><br/>\n");
            out.write("    ");

        }

        url = new URL(identityMgtEndpointContext + "/recoverusername.do?callback="+Encode.forHtmlAttribute
                (urlEncodedURL ));
        httpURLConnection = (HttpURLConnection) url.openConnection();
        httpURLConnection.setRequestMethod("HEAD");
        httpURLConnection.connect();
        if (httpURLConnection.getResponseCode() == HttpURLConnection.HTTP_OK) {
    
            out.write("\n");
            out.write("        <a id=\"usernameRecoverLink\" href=\"");
            out.print(url);
            out.write("\">Forgot Username </a>\n");
            out.write("        <br/><br/>\n");
            out.write("    ");

        }




        url = new URL(identityMgtEndpointContext + "/register.do?callback="+Encode.forHtmlAttribute
                (urlEncodedURL ));
        httpURLConnection = (HttpURLConnection) url.openConnection();
        httpURLConnection.setRequestMethod("HEAD");
        httpURLConnection.connect();
        if (httpURLConnection.getResponseCode() == HttpURLConnection.HTTP_OK) {
        
            out.write("\n");
            out.write("        Don't have an account?\n");
            out.write("        <a id=\"registerLink\" href=\"");
            out.print(url);
            out.write("\">Register Now</a>\n");
            out.write("        ");

                }
            }
        
            out.write("\n");
            out.write("        <br/>\n");
            out.write("        ");
 if (Boolean.parseBoolean(loginFailed) && errorCode.equals(IdentityCoreConstants.USER_ACCOUNT_NOT_CONFIRMED_ERROR_CODE) && request.getParameter("resend_username") == null) { 
            out.write("\n");
            out.write("        Not received confirmation email ?\n");
            out.write("        <a id=\"registerLink\" href=\"login.do?resend_username=");
            out.print(Encode.forHtml(request.getParameter("failedUsername")));
            out.write('&');
            out.print(AuthenticationEndpointUtil.cleanErrorMessages(request.getQueryString()));
            out.write("\">Re-Send</a>\n");
            out.write("\n");
            out.write("        ");
}
            out.write("\n");
            out.write("    </div>\n");
            out.write("\n");
            out.write("    <div class=\"clearfix\"></div>\n");
            out.write("</form>\n");
            out.write("\n");
            out.write("                            ");

                                        }
                                    }
                                }
                            
            out.write("\n");
            out.write("\n");
            out.write("                            ");
if (idpAuthenticatorMapping != null &&
                                    idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) { 
            out.write("\n");
            out.write("\n");
            out.write("                            ");
} 
            out.write("\n");
            out.write("                            ");

                                if ((hasLocalLoginOptions && localAuthenticatorNames.size() > 1) || (!hasLocalLoginOptions)
                                        || (hasLocalLoginOptions && idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1)) {
                            
            out.write("\n");
            out.write("                            <div class=\"form-group\">\n");
            out.write("                                ");
 if (hasLocalLoginOptions) { 
            out.write("\n");
            out.write("                                <label class=\"font-large\">Other login options:</label>\n");
            out.write("                                ");
} 
            out.write("\n");
            out.write("                            </div>\n");
            out.write("                            <div class=\"form-group\">\n");
            out.write("                                ");

                                    int iconId = 0;
                                    if (idpAuthenticatorMapping != null) {
                                    for (Map.Entry<String, String> idpEntry : idpAuthenticatorMapping.entrySet()) {
                                        iconId++;
                                        if (!idpEntry.getKey().equals(Constants.RESIDENT_IDP_RESERVED_NAME)) {
                                            String idpName = idpEntry.getKey();
                                            boolean isHubIdp = false;
                                            if (idpName.endsWith(".hub")) {
                                                isHubIdp = true;
                                                idpName = idpName.substring(0, idpName.length() - 4);
                                            }
                                
            out.write("\n");
            out.write("                                ");
 if (isHubIdp) { 
            out.write("\n");
            out.write("                                <div>\n");
            out.write("                                <a href=\"#\" data-toggle=\"popover\" data-placement=\"bottom\"\n");
            out.write("                                   title=\"Sign in with ");
            out.print(Encode.forHtmlAttribute(idpName));
            out.write("\" id=\"popover\" id=\"icon-");
            out.print(iconId);
            out.write("\">\n");
            out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\"\n");
            out.write("                                         title=\"Sign in with ");
            out.print(Encode.forHtmlAttribute(idpName));
            out.write("\"/>\n");
            out.write("\n");
            out.write("                                    <div id=\"popover-head\" class=\"hide\">\n");
            out.write("                                        <label class=\"font-large\">Sign in with ");
            out.print(Encode.forHtmlContent(idpName));
            out.write("</label>\n");
            out.write("                                    </div>\n");
            out.write("                                    <div id=\"popover-content\" class=\"hide\">\n");
            out.write("                                        <form class=\"form-inline\">\n");
            out.write("                                            <div class=\"form-group\">\n");
            out.write("                                                <input id=\"domainName\" class=\"form-control\" type=\"text\"\n");
            out.write("                                                       placeholder=\"Domain Name\">\n");
            out.write("                                            </div>\n");
            out.write("                                            <input type=\"button\" class=\"btn btn-primary go-btn\"\n");
            out.write("                                                   onClick=\"javascript: myFunction('");
            out.print(idpName);
            out.write('\'');
            out.write(',');
            out.write('\'');
            out.print(idpEntry.getValue());
            out.write("','domainName')\"\n");
            out.write("                                                   value=\"Go\"/>\n");
            out.write("                                        </form>\n");
            out.write("\n");
            out.write("                                    </div>\n");
            out.write("                                </a>\n");
            out.write("                                    <label for=\"icon-");
            out.print(iconId);
            out.write('"');
            out.write('>');
            out.print(Encode.forHtmlContent(idpName));
            out.write("</label>\n");
            out.write("                                </div>\n");
            out.write("                                ");
} else { 
            out.write("\n");
            out.write("                                <div>\n");
            out.write("                                <a onclick=\"javascript: handleNoDomain('");
            out.print(Encode.forJavaScriptAttribute(Encode.
                                forUriComponent(idpName)));
            out.write("',\n");
            out.write("                                        '");
            out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
            out.write("')\"\n");
            out.write("                                   href=\"#\" id=\"icon-");
            out.print(iconId);
            out.write("\">\n");
            out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\" data-toggle=\"tooltip\"\n");
            out.write("                                         data-placement=\"top\" title=\"Sign in with ");
            out.print(Encode.forHtmlAttribute(idpName));
            out.write("\"/>\n");
            out.write("                                </a>\n");
            out.write("                                <label for=\"icon-");
            out.print(iconId);
            out.write('"');
            out.write('>');
            out.print(Encode.forHtmlContent(idpName));
            out.write("</label>\n");
            out.write("                                    </div>\n");
            out.write("                                ");
} 
            out.write("\n");
            out.write("                                ");

                                } else if (localAuthenticatorNames.size() > 0) {
                                    if (localAuthenticatorNames.contains(IWA_AUTHENTICATOR)) {
                                
            out.write("\n");
            out.write("                                <div>\n");
            out.write("                                <a onclick=\"javascript: handleNoDomain('");
            out.print(Encode.forJavaScriptAttribute(Encode.
                                forUriComponent(idpEntry.getKey())));
            out.write("',\n");
            out.write("                                        'IWAAuthenticator')\" class=\"main-link\" style=\"cursor:pointer\" id=\"icon-");
            out.print(iconId);
            out.write("\">\n");
            out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\" data-toggle=\"tooltip\"\n");
            out.write("                                         data-placement=\"top\" title=\"Sign in with IWA\"/>\n");
            out.write("                                </a>\n");
            out.write("                                <label for=\"icon-");
            out.print(iconId);
            out.write("\">IWA</label>\n");
            out.write("                                </div>\n");
            out.write("                                ");

                                    }
                                    if (localAuthenticatorNames.contains(FIDO_AUTHENTICATOR)) {
                                
            out.write("\n");
            out.write("                                <div>\n");
            out.write("                                <a onclick=\"javascript: handleNoDomain('");
            out.print(Encode.forJavaScriptAttribute(Encode.
                                forUriComponent(idpEntry.getKey())));
            out.write("',\n");
            out.write("                                        'FIDOAuthenticator')\" class=\"main-link\" style=\"cursor:pointer\" id=\"icon-");
            out.print(iconId);
            out.write("\">\n");
            out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\" data-toggle=\"tooltip\"\n");
            out.write("                                         data-placement=\"top\" title=\"Sign in with FIDO\"/>\n");
            out.write("                                </a>\n");
            out.write("                                <label for=\"icon-");
            out.print(iconId);
            out.write("\">FIDO</label>\n");
            out.write("\n");
            out.write("                                </div>\n");
            out.write("                                ");

                                            }
                                        }

                                    }
                                    }
            out.write("\n");
            out.write("\n");
            out.write("                            </div>\n");
            out.write("\n");
            out.write("\n");
            out.write("                            ");
 } 
            out.write("\n");
            out.write("\n");
            out.write("                            <div class=\"clearfix\"></div>\n");
            out.write("                        </div>\n");
            out.write("                    </div>\n");
            out.write("                    <!-- /content -->\n");
            out.write("\n");
            out.write("                </div>\n");
            out.write("            </div>\n");
            out.write("            <!-- /content/body -->\n");
            out.write("\n");
            out.write("        </div>\n");
            out.write("    </div>\n");
            out.write("\n");
            out.write("    <!-- footer -->\n");
            out.write("    <footer class=\"footer\">\n");
            out.write("        <div class=\"container-fluid\">\n");
            out.write("            <p>WSO2 Identity Server | &copy;\n");
            out.write("                <script>document.write(new Date().getFullYear());</script>\n");
            out.write("                <a href=\"http://wso2.com/\" target=\"_blank\"><i class=\"icon fw fw-wso2\"></i> Inc</a>. All Rights Reserved.\n");
            out.write("            </p>\n");
            out.write("        </div>\n");
            out.write("    </footer>\n");
            out.write("\n");
            out.write("    <script src=\"libs/jquery_1.11.3/jquery-1.11.3.js\"></script>\n");
            out.write("    <script src=\"libs/bootstrap_3.3.5/js/bootstrap.min.js\"></script>\n");
            out.write("\n");
            out.write("    <script>\n");
            out.write("        $(document).ready(function () {\n");
            out.write("            $('.main-link').click(function () {\n");
            out.write("                $('.main-link').next().hide();\n");
            out.write("                $(this).next().toggle('fast');\n");
            out.write("                var w = $(document).width();\n");
            out.write("                var h = $(document).height();\n");
            out.write("                $('.overlay').css(\"width\", w + \"px\").css(\"height\", h + \"px\").show();\n");
            out.write("            });\n");
            out.write("            $('[data-toggle=\"popover\"]').popover();\n");
            out.write("            $('.overlay').click(function () {\n");
            out.write("                $(this).hide();\n");
            out.write("                $('.main-link').next().hide();\n");
            out.write("            });\n");
            out.write("\n");
            out.write("            ");

            if(reCaptchaEnabled) {
            
            out.write("\n");
            out.write("            var error_msg = $(\"#error-msg\");\n");
            out.write("            $(\"#loginForm\").submit(function (e) {\n");
            out.write("                var resp = $(\"[name='g-recaptcha-response']\")[0].value;\n");
            out.write("                if (resp.trim() == '') {\n");
            out.write("                    error_msg.text(\"Please select reCaptcha.\");\n");
            out.write("                    error_msg.show();\n");
            out.write("                    $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
            out.write("                    return false;\n");
            out.write("                }\n");
            out.write("                return true;\n");
            out.write("            });\n");
            out.write("            ");

            }
            
            out.write("\n");
            out.write("        });\n");
            out.write("        function myFunction(key, value, name) {\n");
            out.write("            var object = document.getElementById(name);\n");
            out.write("            var domain = object.value;\n");
            out.write("\n");
            out.write("\n");
            out.write("            if (domain != \"\") {\n");
            out.write("                document.location = \"../commonauth?idp=\" + key + \"&authenticator=\" + value +\n");
            out.write("                        \"&sessionDataKey=");
            out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
            out.write("&domain=\" +\n");
            out.write("                        domain;\n");
            out.write("            } else {\n");
            out.write("                document.location = \"../commonauth?idp=\" + key + \"&authenticator=\" + value +\n");
            out.write("                        \"&sessionDataKey=");
            out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
            out.write("\";\n");
            out.write("            }\n");
            out.write("        }\n");
            out.write("\n");
            out.write("        function handleNoDomain(key, value) {\n");
            out.write("            document.location = \"../commonauth?idp=\" + key + \"&authenticator=\" + value +\n");
            out.write("                    \"&sessionDataKey=");
            out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
            out.write("\";\n");
            out.write("        }\n");
            out.write("\n");
            out.write("        $('#popover').popover({\n");
            out.write("            html: true,\n");
            out.write("            title: function () {\n");
            out.write("                return $(\"#popover-head\").html();\n");
            out.write("            },\n");
            out.write("            content: function () {\n");
            out.write("                return $(\"#popover-content\").html();\n");
            out.write("            }\n");
            out.write("        });\n");
            out.write("\n");
            out.write("    </script>\n");
            out.write("\n");
            out.write("    </body>\n");
            out.write("    </html>\n");
            out.write("\n");
            out.write("\n");
            int evalDoAfterBody = _jspx_th_fmt_005fbundle_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_fmt_005fbundle_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
      } finally {
        _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.reuse(_jspx_th_fmt_005fbundle_005f0);
      }
      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_fmt_005fmessage_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f1 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    try {
      _jspx_th_fmt_005fmessage_005f1.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /tenantauth.jsp(34,27) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f1.setKey("select.tenant.dropdown.display.name");
      int _jspx_eval_fmt_005fmessage_005f1 = _jspx_th_fmt_005fmessage_005f1.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f1);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f2 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    try {
      _jspx_th_fmt_005fmessage_005f2.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /tenantauth.jsp(35,16) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f2.setKey("select.tenant.dropdown.display.name");
      int _jspx_eval_fmt_005fmessage_005f2 = _jspx_th_fmt_005fmessage_005f2.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f2);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f3 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    try {
      _jspx_th_fmt_005fmessage_005f3.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /tenantauth.jsp(37,27) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f3.setKey("super.tenant");
      int _jspx_eval_fmt_005fmessage_005f3 = _jspx_th_fmt_005fmessage_005f3.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f3);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f4(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f4 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    try {
      _jspx_th_fmt_005fmessage_005f4.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /tenantauth.jsp(37,62) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f4.setKey("super.tenant.display.name");
      int _jspx_eval_fmt_005fmessage_005f4 = _jspx_th_fmt_005fmessage_005f4.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f4);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f5(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f5 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    try {
      _jspx_th_fmt_005fmessage_005f5.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f5.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /tenantauth.jsp(102,33) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f5.setKey("select.tenant.dropdown.display.name");
      int _jspx_eval_fmt_005fmessage_005f5 = _jspx_th_fmt_005fmessage_005f5.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f5);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f6(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f6 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    try {
      _jspx_th_fmt_005fmessage_005f6.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f6.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /tenantauth.jsp(156,31) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f6.setKey("super.tenant");
      int _jspx_eval_fmt_005fmessage_005f6 = _jspx_th_fmt_005fmessage_005f6.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f6);
    }
    return false;
  }
}
